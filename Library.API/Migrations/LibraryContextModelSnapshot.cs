// <auto-generated />
using System;
using Library.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.API.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Domain.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfDeath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Library.Domain.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<byte>("PageCount");

                    b.Property<DateTime>("PublicationDate");

                    b.Property<Guid>("PublicationHouseId");

                    b.Property<int>("PublicationType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("PublicationHouseId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Library.Domain.Models.PublicationAuthors", b =>
                {
                    b.Property<Guid>("PublicationId");

                    b.Property<Guid>("AuthorId");

                    b.HasKey("PublicationId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("PublicationAuthors");
                });

            modelBuilder.Entity("Library.Domain.Models.PublicationCategories", b =>
                {
                    b.Property<Guid>("PublicationId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("PublicationId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PublicationCategories");
                });

            modelBuilder.Entity("Library.Domain.Models.PublicationHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PublicationHouses");
                });

            modelBuilder.Entity("Library.Domain.Models.Publication", b =>
                {
                    b.HasOne("Library.Domain.Models.PublicationHouse", "PublicationHouse")
                        .WithMany("Publications")
                        .HasForeignKey("PublicationHouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Domain.Models.PublicationAuthors", b =>
                {
                    b.HasOne("Library.Domain.Models.Author", "Author")
                        .WithMany("PublicationAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Domain.Models.Publication", "Publication")
                        .WithMany("PublicationAuthors")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Domain.Models.PublicationCategories", b =>
                {
                    b.HasOne("Library.Domain.Models.Category", "Category")
                        .WithMany("PublicationCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Domain.Models.Publication", "Publication")
                        .WithMany("PublicationCategories")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
